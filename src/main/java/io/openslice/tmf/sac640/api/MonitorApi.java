/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.openslice.tmf.sac640.api;

import io.openslice.tmf.sac640.model.Error;
import io.openslice.tmf.sac640.model.Monitor;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-29T12:42:32.118457300+03:00[Europe/Athens]")
@Api(value = "monitor", description = "the monitor API")
public interface MonitorApi {

    Logger log = LoggerFactory.getLogger(MonitorApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "List or find Monitor objects", nickname = "listMonitor", notes = "This operation list or find Monitor entities", response = Monitor.class, responseContainer = "List", tags={ "monitor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Monitor.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/monitor",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Monitor>> listMonitor(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields
,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"request\" : {\r\n    \"method\" : \"method\",\r\n    \"@baseType\" : \"@baseType\",\r\n    \"@type\" : \"@type\",\r\n    \"header\" : [ {\r\n      \"@baseType\" : \"@baseType\",\r\n      \"@type\" : \"@type\",\r\n      \"name\" : \"name\",\r\n      \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"@baseType\" : \"@baseType\",\r\n      \"@type\" : \"@type\",\r\n      \"name\" : \"name\",\r\n      \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"to\" : \"to\",\r\n    \"body\" : \"body\",\r\n    \"@schemaLocation\" : \"http://example.com/aeiou\"\r\n  },\r\n  \"@baseType\" : \"@baseType\",\r\n  \"response\" : {\r\n    \"@baseType\" : \"@baseType\",\r\n    \"@type\" : \"@type\",\r\n    \"header\" : [ null, null ],\r\n    \"body\" : \"body\",\r\n    \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n    \"statusCode\" : \"statusCode\"\r\n  },\r\n  \"@type\" : \"@type\",\r\n  \"id\" : \"id\",\r\n  \"href\" : \"href\",\r\n  \"state\" : \"state\",\r\n  \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n  \"sourceHref\" : \"sourceHref\"\r\n}, {\r\n  \"request\" : {\r\n    \"method\" : \"method\",\r\n    \"@baseType\" : \"@baseType\",\r\n    \"@type\" : \"@type\",\r\n    \"header\" : [ {\r\n      \"@baseType\" : \"@baseType\",\r\n      \"@type\" : \"@type\",\r\n      \"name\" : \"name\",\r\n      \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"@baseType\" : \"@baseType\",\r\n      \"@type\" : \"@type\",\r\n      \"name\" : \"name\",\r\n      \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"to\" : \"to\",\r\n    \"body\" : \"body\",\r\n    \"@schemaLocation\" : \"http://example.com/aeiou\"\r\n  },\r\n  \"@baseType\" : \"@baseType\",\r\n  \"response\" : {\r\n    \"@baseType\" : \"@baseType\",\r\n    \"@type\" : \"@type\",\r\n    \"header\" : [ null, null ],\r\n    \"body\" : \"body\",\r\n    \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n    \"statusCode\" : \"statusCode\"\r\n  },\r\n  \"@type\" : \"@type\",\r\n  \"id\" : \"id\",\r\n  \"href\" : \"href\",\r\n  \"state\" : \"state\",\r\n  \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n  \"sourceHref\" : \"sourceHref\"\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default MonitorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieves a Monitor by ID", nickname = "retrieveMonitor", notes = "This operation retrieves a Monitor entity. Attribute selection is enabled for all first level attributes.", response = Monitor.class, tags={ "monitor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Monitor.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/monitor/{id}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Monitor> retrieveMonitor(@ApiParam(value = "Identifier of the Monitor",required=true) @PathVariable("id") String id
,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"request\" : {\r\n    \"method\" : \"method\",\r\n    \"@baseType\" : \"@baseType\",\r\n    \"@type\" : \"@type\",\r\n    \"header\" : [ {\r\n      \"@baseType\" : \"@baseType\",\r\n      \"@type\" : \"@type\",\r\n      \"name\" : \"name\",\r\n      \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"@baseType\" : \"@baseType\",\r\n      \"@type\" : \"@type\",\r\n      \"name\" : \"name\",\r\n      \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"to\" : \"to\",\r\n    \"body\" : \"body\",\r\n    \"@schemaLocation\" : \"http://example.com/aeiou\"\r\n  },\r\n  \"@baseType\" : \"@baseType\",\r\n  \"response\" : {\r\n    \"@baseType\" : \"@baseType\",\r\n    \"@type\" : \"@type\",\r\n    \"header\" : [ null, null ],\r\n    \"body\" : \"body\",\r\n    \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n    \"statusCode\" : \"statusCode\"\r\n  },\r\n  \"@type\" : \"@type\",\r\n  \"id\" : \"id\",\r\n  \"href\" : \"href\",\r\n  \"state\" : \"state\",\r\n  \"@schemaLocation\" : \"http://example.com/aeiou\",\r\n  \"sourceHref\" : \"sourceHref\"\r\n}", Monitor.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default MonitorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
