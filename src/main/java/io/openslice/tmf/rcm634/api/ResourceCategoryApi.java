/*-
 * ========================LICENSE_START=================================
 * io.openslice.tmf.api
 * %%
 * Copyright (C) 2019 openslice.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.openslice.tmf.rcm634.api;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.openslice.tmf.rcm634.model.Error;
import io.openslice.tmf.rcm634.model.ResourceCategory;
import io.openslice.tmf.rcm634.model.ResourceCategoryCreate;
import io.openslice.tmf.rcm634.model.ResourceCategoryUpdate;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-19T00:06:08.595+03:00")

@Api(value = "resourceCategory", description = "the resourceCategory API")
public interface ResourceCategoryApi {

    Logger log = LoggerFactory.getLogger(ResourceCategoryApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates a 'ResourceCategory'", nickname = "createResourceCategory", notes = "", response = ResourceCategory.class, tags={ "resourceCategory", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ResourceCategory.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/resourceCategory",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceCategory> createResourceCategory(@ApiParam(value = "The Resource Category to be created" ,required=true )  @Valid @RequestBody ResourceCategoryCreate resourceCategory) {
       
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a 'ResourceCategory' by Id", nickname = "deleteResourceCategory", notes = "", tags={ "resourceCategory", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/resourceCategory/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteResourceCategory(@ApiParam(value = "Identifier of the Resource Category",required=true) @PathVariable("id") String id) {

        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List or find 'ResourceCategory' objects", nickname = "listResourceCategory", notes = "", response = ResourceCategory.class, responseContainer = "List", tags={ "resourceCategory", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResourceCategory.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/resourceCategory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ResourceCategory>> listResourceCategory(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "For filtering: Name of the category") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "For filtering: The (class) type of this category") @Valid @RequestParam(value = "@type", required = false) String type,@ApiParam(value = "For filtering: This field provides a link to the schema describing this REST resource") @Valid @RequestParam(value = "@schemalLocation", required = false) String schemalLocation,@ApiParam(value = "For filtering: Immediate base class type of this category") @Valid @RequestParam(value = "@baseType", required = false) String baseType,@ApiParam(value = "For filtering: Category version") @Valid @RequestParam(value = "version", required = false) String version,@ApiParam(value = "For filtering: An instant of time, starting at the TimePeriod") @Valid @RequestParam(value = "validFor.startDateTime", required = false) OffsetDateTime validForStartDateTime,@ApiParam(value = "For filtering: An instant of time, ending at the TimePeriod.") @Valid @RequestParam(value = "validFor.endDateTime", required = false) OffsetDateTime validForEndDateTime,@ApiParam(value = "For filtering: Used to indicate the current lifecycle status") @Valid @RequestParam(value = "lifecycleStatus", required = false) String lifecycleStatus,@ApiParam(value = "For filtering: Date and time of the last update") @Valid @RequestParam(value = "lastUpdate", required = false) OffsetDateTime lastUpdate,@ApiParam(value = "For filtering: Unique identifier of the parent category") @Valid @RequestParam(value = "parentId", required = false) String parentId,@ApiParam(value = "For filtering: If true, this Boolean indicates that the category is a root of categories") @Valid @RequestParam(value = "isRoot", required = false) Boolean isRoot,@ApiParam(value = "For filtering: Category version") @Valid @RequestParam(value = "category.version", required = false) String categoryVersion,@ApiParam(value = "For filtering: Name of the category") @Valid @RequestParam(value = "category.name", required = false) String categoryName,@ApiParam(value = "For filtering: the class type of the category") @Valid @RequestParam(value = "category.@type", required = false) String categoryType,@ApiParam(value = "For filtering: ResourceCandidate version") @Valid @RequestParam(value = "resourceCandidate.version", required = false) String resourceCandidateVersion,@ApiParam(value = "For filtering: Name given to the ResourceCandidate") @Valid @RequestParam(value = "resourceCandidate.name", required = false) String resourceCandidateName,@ApiParam(value = "For filtering: The (class) type of the ResourceCandidate") @Valid @RequestParam(value = "resourceCandidate.@type", required = false) String resourceCandidateType,@ApiParam(value = "For filtering: Role of the related party.") @Valid @RequestParam(value = "relatedParty.role", required = false) String relatedPartyRole,@ApiParam(value = "For filtering: Name of the related party") @Valid @RequestParam(value = "relatedParty.name", required = false) String relatedPartyName) {

        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates partially a 'ResourceCategory' by Id", nickname = "patchResourceCategory", notes = "", response = ResourceCategory.class, tags={ "resourceCategory", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Updated", response = ResourceCategory.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/resourceCategory/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<ResourceCategory> patchResourceCategory(@ApiParam(value = "Identifier of the Resource Category",required=true) @PathVariable("id") String id,@ApiParam(value = "The Resource Category to be updated" ,required=true )  @Valid @RequestBody ResourceCategoryUpdate resourceCategory) {

        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieves a 'ResourceCategory' by Id", nickname = "retrieveResourceCategory", notes = "", response = ResourceCategory.class, responseContainer = "List", tags={ "resourceCategory", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResourceCategory.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/resourceCategory/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<ResourceCategory> retrieveResourceCategory(@ApiParam(value = "Identifier of the Resource Category",required=true) @PathVariable("id") String id) {
       
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
