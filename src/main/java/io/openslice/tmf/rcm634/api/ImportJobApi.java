/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.openslice.tmf.rcm634.api;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.openslice.tmf.rcm634.model.Error;
import io.openslice.tmf.rcm634.model.ImportJob;
import io.openslice.tmf.rcm634.model.ImportJobCreate;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-19T00:06:08.595+03:00")

@Api(value = "importJob", description = "the importJob API")
public interface ImportJobApi {

    Logger log = LoggerFactory.getLogger(ImportJobApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates a 'ImportJob'", nickname = "createImportJob", notes = "", response = ImportJob.class, tags={ "importJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ImportJob.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/importJob",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ImportJob> createImportJob(@ApiParam(value = "The Import Job to be created" ,required=true )  @Valid @RequestBody ImportJobCreate importJob) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"path\" : \"path\",  \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"errorLog\" : \"errorLog\",  \"id\" : \"id\",  \"href\" : \"href\",  \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"contentType\" : \"contentType\",  \"url\" : \"url\",  \"status\" : \"status\"}", ImportJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ImportJobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a 'ImportJob' by Id", nickname = "deleteImportJob", notes = "", tags={ "importJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/importJob/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteImportJob(@ApiParam(value = "Identifier of the Import Job",required=true) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ImportJobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List or find 'ImportJob' objects", nickname = "listImportJob", notes = "", response = ImportJob.class, responseContainer = "List", tags={ "importJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ImportJob.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/importJob",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<ImportJob>> listImportJob(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "For filtering: Indicates the format of the imported data") @Valid @RequestParam(value = "contentType", required = false) String contentType,@ApiParam(value = "For filtering: URL of the root resource where the content of the file specified by the import job must be applied") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "For filtering: Status of the import job (not started, running, succeeded, failed)") @Valid @RequestParam(value = "status", required = false) String status,@ApiParam(value = "For filtering: URL of the file containing the data to be imported") @Valid @RequestParam(value = "url", required = false) String url,@ApiParam(value = "For filtering: Date at which the job was completed") @Valid @RequestParam(value = "completionDate", required = false) OffsetDateTime completionDate,@ApiParam(value = "For filtering: Date at which the job was created") @Valid @RequestParam(value = "creationDate", required = false) OffsetDateTime creationDate,@ApiParam(value = "For filtering: Reason for failure if status is failed") @Valid @RequestParam(value = "errorLog", required = false) String errorLog) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"path\" : \"path\",  \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"errorLog\" : \"errorLog\",  \"id\" : \"id\",  \"href\" : \"href\",  \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"contentType\" : \"contentType\",  \"url\" : \"url\",  \"status\" : \"status\"}, {  \"path\" : \"path\",  \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"errorLog\" : \"errorLog\",  \"id\" : \"id\",  \"href\" : \"href\",  \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"contentType\" : \"contentType\",  \"url\" : \"url\",  \"status\" : \"status\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ImportJobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieves a 'ImportJob' by Id", nickname = "retrieveImportJob", notes = "", response = ImportJob.class, responseContainer = "List", tags={ "importJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ImportJob.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/importJob/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<ImportJob>> retrieveImportJob(@ApiParam(value = "Identifier of the Import Job",required=true) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"path\" : \"path\",  \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"errorLog\" : \"errorLog\",  \"id\" : \"id\",  \"href\" : \"href\",  \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"contentType\" : \"contentType\",  \"url\" : \"url\",  \"status\" : \"status\"}, {  \"path\" : \"path\",  \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"errorLog\" : \"errorLog\",  \"id\" : \"id\",  \"href\" : \"href\",  \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"contentType\" : \"contentType\",  \"url\" : \"url\",  \"status\" : \"status\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ImportJobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
