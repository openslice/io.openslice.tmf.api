/*-
 * ========================LICENSE_START=================================
 * io.openslice.tmf.api
 * %%
 * Copyright (C) 2019 - 2020 openslice.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.openslice.tmf.fi691.api;

import io.openslice.tmf.fi691.model.UserInfoType;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-20T00:39:05.842+02:00")

@Api(value = "userinfo", description = "the userinfo API")
public interface UserinfoApi {

    Logger log = LoggerFactory.getLogger(UserinfoApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Retrieve user identity information", nickname = "retrieveUserIdentity", notes = "", response = UserInfoType.class, tags={ "userinfo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User identity information provided", response = UserInfoType.class),
        @ApiResponse(code = 400, message = "Invalid Token"),
        @ApiResponse(code = 401, message = "Invalid Token"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 405, message = "Method not Allowed"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/userinfo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<UserInfoType> retrieveUserIdentity(@ApiParam(value = "token to be passed as a header linked to the user whose identity is requested" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "To apply specific filter in the response ") @Valid @RequestParam(value = "fields", required = false) String fields) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"sub\" : \"sub\",  \"zoneinfo\" : \"zoneinfo\",  \"website\" : \"website\",  \"birthdate\" : \"birthdate\",  \"address\" : {    \"country\" : \"country\",    \"streetType\" : \"streetType\",    \"geographicLocation\" : {      \"@type\" : \"@type\",      \"name\" : \"name\",      \"geographicPoint\" : {        \"spatialRef\" : \"spatialRef\",        \"x\" : \"x\",        \"accuracy\" : \"accuracy\",        \"y\" : \"y\",        \"z\" : \"z\"      },      \"id\" : \"id\",      \"href\" : \"href\",      \"type\" : \"type\",      \"@schemaLocation\" : \"@schemaLocation\"    },    \"city\" : \"city\",    \"streetNr\" : \"streetNr\",    \"@type\" : \"@type\",    \"postcode\" : \"postcode\",    \"locality\" : \"locality\",    \"streetNrLast\" : \"streetNrLast\",    \"streetNrSuffix\" : \"streetNrSuffix\",    \"streetName\" : \"streetName\",    \"stateOrProvince\" : \"stateOrProvince\",    \"streetNrLastSuffix\" : \"streetNrLastSuffix\",    \"streetSuffix\" : \"streetSuffix\",    \"geographicSubAddress\" : {      \"buildingName\" : \"buildingName\",      \"subUnitNumber\" : \"subUnitNumber\",      \"subUnitType\" : \"subUnitType\",      \"levelType\" : \"levelType\",      \"@type\" : \"@type\",      \"name\" : \"name\",      \"levelNumber\" : \"levelNumber\",      \"type\" : \"type\",      \"privateStreetNumber\" : \"privateStreetNumber\",      \"@schemaLocation\" : \"@schemaLocation\",      \"privateStreetName\" : \"privateStreetName\"    },    \"@schemaLocation\" : \"@schemaLocation\"  },  \"gender\" : \"gender\",  \"@type\" : \"@type\",  \"profile\" : \"profile\",  \"legalId\" : [ {    \"country\" : \"country\",    \"issuingAuthority\" : \"issuingAuthority\",    \"issuingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\",    \"identificationId\" : \"identificationId\"  }, {    \"country\" : \"country\",    \"issuingAuthority\" : \"issuingAuthority\",    \"issuingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\",    \"identificationId\" : \"identificationId\"  } ],  \"preferred_username\" : \"preferred_username\",  \"given_name\" : \"given_name\",  \"middle_name\" : \"middle_name\",  \"locale\" : \"locale\",  \"picture\" : \"picture\",  \"userAssets\" : [ {    \"role\" : \"role\",    \"entityType\" : \"customer\",    \"entitlement\" : [ {      \"function\" : \"function\",      \"action\" : \"action\"    }, {      \"function\" : \"function\",      \"action\" : \"action\"    } ],    \"id\" : \"id\",    \"assetType\" : \"mobile\"  }, {    \"role\" : \"role\",    \"entityType\" : \"customer\",    \"entitlement\" : [ {      \"function\" : \"function\",      \"action\" : \"action\"    }, {      \"function\" : \"function\",      \"action\" : \"action\"    } ],    \"id\" : \"id\",    \"assetType\" : \"mobile\"  } ],  \"@baseType\" : \"@baseType\",  \"name\" : \"name\",  \"nickname\" : \"nickname\",  \"phone_number\" : \"phone_number\",  \"@schemaLocation\" : \"@schemaLocation\",  \"family_name\" : \"family_name\",  \"email\" : \"email\"}", UserInfoType.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserinfoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
