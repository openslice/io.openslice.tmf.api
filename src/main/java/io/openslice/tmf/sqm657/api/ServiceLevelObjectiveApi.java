/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.openslice.tmf.sqm657.api;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.openslice.tmf.sqm657.model.Error;
import io.openslice.tmf.sqm657.model.ServiceLevelObjective;
import io.openslice.tmf.sqm657.model.ServiceLevelObjectiveCreate;
import io.openslice.tmf.sqm657.model.ServiceLevelObjectiveUpdate;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-19T00:14:31.369+03:00")

@Api(value = "serviceLevelObjective", description = "the serviceLevelObjective API")
public interface ServiceLevelObjectiveApi {

    Logger log = LoggerFactory.getLogger(ServiceLevelObjectiveApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates a 'ServiceLevelObjective'", nickname = "createServiceLevelObjective", notes = "", response = ServiceLevelObjective.class, tags={ "serviceLevelObjective", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ServiceLevelObjective.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/serviceLevelObjective",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ServiceLevelObjective> createServiceLevelObjective(@ApiParam(value = "The Service Level Objective to be created" ,required=true )  @Valid @RequestBody ServiceLevelObjectiveCreate serviceLevelObjective) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"specConsequence\" : [ {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  }, {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  } ],  \"conformanceComparator\" : \"conformanceComparator\",  \"graceTimes\" : \"graceTimes\",  \"validFor\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"@type\" : \"@type\",  \"specParameter\" : {    \"serviceParmCategory\" : \"serviceParmCategory\",    \"transformationAlgorithmOfKQI\" : \"transformationAlgorithmOfKQI\",    \"serviceParmPerspective\" : \"serviceParmPerspective\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"relatedEntity\" : [ {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    }, {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    } ],    \"name\" : \"name\",    \"type\" : \"type\",    \"@schemaLocation\" : \"@schemaLocation\"  },  \"conformanceTarget\" : \"conformanceTarget\",  \"toleranceTarget\" : \"toleranceTarget\",  \"@baseType\" : \"@baseType\",  \"tolerancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"name\" : \"name\",  \"conformancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"thresholdTarget\" : \"thresholdTarget\",  \"href\" : \"href\",  \"id\" : \"id\",  \"@schemaLocation\" : \"@schemaLocation\"}", ServiceLevelObjective.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServiceLevelObjectiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a 'ServiceLevelObjective' by Id", nickname = "deleteServiceLevelObjective", notes = "", tags={ "serviceLevelObjective", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/serviceLevelObjective/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteServiceLevelObjective(@ApiParam(value = "Identifier of the Service Level Objective",required=true) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServiceLevelObjectiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List or find 'ServiceLevelObjective' objects", nickname = "listServiceLevelObjective", notes = "", response = ServiceLevelObjective.class, responseContainer = "List", tags={ "serviceLevelObjective", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ServiceLevelObjective.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/serviceLevelObjective",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<ServiceLevelObjective>> listServiceLevelObjective(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"specConsequence\" : [ {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  }, {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  } ],  \"conformanceComparator\" : \"conformanceComparator\",  \"graceTimes\" : \"graceTimes\",  \"validFor\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"@type\" : \"@type\",  \"specParameter\" : {    \"serviceParmCategory\" : \"serviceParmCategory\",    \"transformationAlgorithmOfKQI\" : \"transformationAlgorithmOfKQI\",    \"serviceParmPerspective\" : \"serviceParmPerspective\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"relatedEntity\" : [ {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    }, {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    } ],    \"name\" : \"name\",    \"type\" : \"type\",    \"@schemaLocation\" : \"@schemaLocation\"  },  \"conformanceTarget\" : \"conformanceTarget\",  \"toleranceTarget\" : \"toleranceTarget\",  \"@baseType\" : \"@baseType\",  \"tolerancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"name\" : \"name\",  \"conformancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"thresholdTarget\" : \"thresholdTarget\",  \"href\" : \"href\",  \"id\" : \"id\",  \"@schemaLocation\" : \"@schemaLocation\"}, {  \"specConsequence\" : [ {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  }, {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  } ],  \"conformanceComparator\" : \"conformanceComparator\",  \"graceTimes\" : \"graceTimes\",  \"validFor\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"@type\" : \"@type\",  \"specParameter\" : {    \"serviceParmCategory\" : \"serviceParmCategory\",    \"transformationAlgorithmOfKQI\" : \"transformationAlgorithmOfKQI\",    \"serviceParmPerspective\" : \"serviceParmPerspective\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"relatedEntity\" : [ {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    }, {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    } ],    \"name\" : \"name\",    \"type\" : \"type\",    \"@schemaLocation\" : \"@schemaLocation\"  },  \"conformanceTarget\" : \"conformanceTarget\",  \"toleranceTarget\" : \"toleranceTarget\",  \"@baseType\" : \"@baseType\",  \"tolerancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"name\" : \"name\",  \"conformancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"thresholdTarget\" : \"thresholdTarget\",  \"href\" : \"href\",  \"id\" : \"id\",  \"@schemaLocation\" : \"@schemaLocation\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServiceLevelObjectiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates partially a 'ServiceLevelObjective' by Id", nickname = "patchServiceLevelObjective", notes = "", response = ServiceLevelObjective.class, tags={ "serviceLevelObjective", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = ServiceLevelObjective.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/serviceLevelObjective/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<ServiceLevelObjective> patchServiceLevelObjective(@ApiParam(value = "Identifier of the Service Level Objective",required=true) @PathVariable("id") String id,@ApiParam(value = "The Service Level Objective to be updated" ,required=true )  @Valid @RequestBody ServiceLevelObjectiveUpdate serviceLevelObjective) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"specConsequence\" : [ {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  }, {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  } ],  \"conformanceComparator\" : \"conformanceComparator\",  \"graceTimes\" : \"graceTimes\",  \"validFor\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"@type\" : \"@type\",  \"specParameter\" : {    \"serviceParmCategory\" : \"serviceParmCategory\",    \"transformationAlgorithmOfKQI\" : \"transformationAlgorithmOfKQI\",    \"serviceParmPerspective\" : \"serviceParmPerspective\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"relatedEntity\" : [ {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    }, {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    } ],    \"name\" : \"name\",    \"type\" : \"type\",    \"@schemaLocation\" : \"@schemaLocation\"  },  \"conformanceTarget\" : \"conformanceTarget\",  \"toleranceTarget\" : \"toleranceTarget\",  \"@baseType\" : \"@baseType\",  \"tolerancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"name\" : \"name\",  \"conformancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"thresholdTarget\" : \"thresholdTarget\",  \"href\" : \"href\",  \"id\" : \"id\",  \"@schemaLocation\" : \"@schemaLocation\"}", ServiceLevelObjective.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServiceLevelObjectiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieves a 'ServiceLevelObjective' by Id", nickname = "retrieveServiceLevelObjective", notes = "", response = ServiceLevelObjective.class, responseContainer = "List", tags={ "serviceLevelObjective", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ServiceLevelObjective.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/serviceLevelObjective/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<ServiceLevelObjective>> retrieveServiceLevelObjective(@ApiParam(value = "Identifier of the Service Level Objective",required=true) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"specConsequence\" : [ {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  }, {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  } ],  \"conformanceComparator\" : \"conformanceComparator\",  \"graceTimes\" : \"graceTimes\",  \"validFor\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"@type\" : \"@type\",  \"specParameter\" : {    \"serviceParmCategory\" : \"serviceParmCategory\",    \"transformationAlgorithmOfKQI\" : \"transformationAlgorithmOfKQI\",    \"serviceParmPerspective\" : \"serviceParmPerspective\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"relatedEntity\" : [ {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    }, {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    } ],    \"name\" : \"name\",    \"type\" : \"type\",    \"@schemaLocation\" : \"@schemaLocation\"  },  \"conformanceTarget\" : \"conformanceTarget\",  \"toleranceTarget\" : \"toleranceTarget\",  \"@baseType\" : \"@baseType\",  \"tolerancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"name\" : \"name\",  \"conformancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"thresholdTarget\" : \"thresholdTarget\",  \"href\" : \"href\",  \"id\" : \"id\",  \"@schemaLocation\" : \"@schemaLocation\"}, {  \"specConsequence\" : [ {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  }, {    \"prescribedAction\" : \"prescribedAction\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"@schemaLocation\" : \"@schemaLocation\"  } ],  \"conformanceComparator\" : \"conformanceComparator\",  \"graceTimes\" : \"graceTimes\",  \"validFor\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"@type\" : \"@type\",  \"specParameter\" : {    \"serviceParmCategory\" : \"serviceParmCategory\",    \"transformationAlgorithmOfKQI\" : \"transformationAlgorithmOfKQI\",    \"serviceParmPerspective\" : \"serviceParmPerspective\",    \"@baseType\" : \"@baseType\",    \"validFor\" : {      \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"@type\" : \"@type\",    \"relatedEntity\" : [ {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    }, {      \"@referredType\" : \"@referredType\",      \"name\" : \"name\",      \"href\" : \"href\",      \"id\" : \"id\"    } ],    \"name\" : \"name\",    \"type\" : \"type\",    \"@schemaLocation\" : \"@schemaLocation\"  },  \"conformanceTarget\" : \"conformanceTarget\",  \"toleranceTarget\" : \"toleranceTarget\",  \"@baseType\" : \"@baseType\",  \"tolerancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"name\" : \"name\",  \"conformancePeriod\" : {    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"thresholdTarget\" : \"thresholdTarget\",  \"href\" : \"href\",  \"id\" : \"id\",  \"@schemaLocation\" : \"@schemaLocation\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServiceLevelObjectiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
